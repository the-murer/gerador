import { type NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"
import { GitHubService, parseGitHubRepo } from "@/lib/github"
import clientPromise from "@/lib/mongodb"
import { ObjectId } from "mongodb"

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const { projectId, changes, messageId, sessionId } = await request.json()

    if (!changes || !changes.files || changes.files.length === 0) {
      return NextResponse.json({ error: "No changes provided" }, { status: 400 })
    }

    const client = await clientPromise
    if (messageId && sessionId) {
      const chatSessions = client.db().collection("chatSessions")
      const session_doc = await chatSessions.findOne({
        sessionId: sessionId,
        projectId: new ObjectId(projectId),
        "messages.id": messageId,
      })

      if (!session_doc) {
        return NextResponse.json({ error: "Invalid message ID or session" }, { status: 400 })
      }
    }

    // Get project details
    const projects = client.db().collection("projects")
    const project = await projects.findOne({
      _id: new ObjectId(projectId),
      allowedUsers: { $in: [session.user.id] },
    })

    if (!project) {
      return NextResponse.json({ error: "Project not found or access denied" }, { status: 404 })
    }

    // Parse GitHub repository
    const { owner, repo } = parseGitHubRepo(project.githubRepo)

    // Initialize GitHub service
    const githubToken = process.env.GITHUB_TOKEN
    if (!githubToken) {
      return NextResponse.json({ error: "GitHub token not configured" }, { status: 500 })
    }

    const github = new GitHubService(githubToken)

    const timestamp = new Date().toISOString().replace(/[:.]/g, "-")
    const branchName = messageId
      ? `ai-modification-${messageId.slice(0, 8)}-${timestamp}`
      : `ai-modification-${timestamp}`

    try {
      // Create new branch
      await github.createBranch(owner, repo, branchName, project.destinationBranch)

      // Apply changes to files
      const commitResults = []
      for (const fileChange of changes.files) {
        const { path, content, action = "update" } = fileChange

        let sha = undefined
        if (action === "update") {
          // Get current file SHA for updates
          try {
            const currentFile = await github.getFileContent(owner, repo, path, branchName)
            sha = currentFile.sha
          } catch (error) {
            // File doesn't exist, will be created
          }
        }

        const commitMessage = messageId
          ? `AI modification (${messageId.slice(0, 8)}): ${action} ${path}`
          : `AI modification: ${action} ${path}`
        const result = await github.createOrUpdateFile(owner, repo, path, content, commitMessage, branchName, sha)
        commitResults.push(result)
      }

      // Create pull request
      const prTitle = `AI-powered modifications by ${session.user.name}`
      const prBody = `
## AI-Generated Changes

This pull request contains modifications generated by the AI assistant.

**Changes made:**
${changes.files.map((f: any) => `- ${f.action || "update"}: \`${f.path}\``).join("\n")}

**Requested by:** ${session.user.name} (${session.user.email})
**Project:** ${project.name}
**Timestamp:** ${new Date().toISOString()}
${messageId ? `**Message ID:** ${messageId}` : ""}
${sessionId ? `**Session ID:** ${sessionId}` : ""}

Please review the changes before merging.
      `

      const pullRequest = await github.createPullRequest(
        owner,
        repo,
        prTitle,
        branchName,
        project.destinationBranch,
        prBody,
      )

      const activities = client.db().collection("activities")
      await activities.insertOne({
        projectId: new ObjectId(projectId),
        userId: new ObjectId(session.user.id),
        type: "commit",
        branch: branchName,
        pullRequestUrl: pullRequest.html_url,
        pullRequestNumber: pullRequest.number,
        changes: changes.files,
        messageId: messageId,
        sessionId: sessionId,
        netlifyStatus: "pending",
        timestamp: new Date(),
      })

      if (messageId && sessionId) {
        const chatSessions = client.db().collection("chatSessions")
        await chatSessions.updateOne(
          {
            sessionId: sessionId,
            projectId: new ObjectId(projectId),
          },
          {
            $set: {
              isActive: false,
              completedAt: new Date(),
              commitBranch: branchName,
              pullRequestUrl: pullRequest.html_url,
              pullRequestNumber: pullRequest.number,
              netlifyStatus: "pending",
            },
          },
        )
      }

      return NextResponse.json({
        success: true,
        branch: branchName,
        pullRequest: {
          url: pullRequest.html_url,
          number: pullRequest.number,
        },
        commits: commitResults.length,
        messageId: messageId,
        sessionId: sessionId,
      })
    } catch (error) {
      console.error("Commit error:", error)
      return NextResponse.json({ error: error.message || "Failed to commit changes" }, { status: 500 })
    }
  } catch (error) {
    console.error("GitHub commit error:", error)
    return NextResponse.json({ error: error.message || "Failed to process commit" }, { status: 500 })
  }
}
